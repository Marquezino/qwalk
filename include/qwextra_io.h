/* QWalk (qwextra_io.h) 
 * Copyright (C) 2007  Franklin Marquezino
 *                                                                                                                           
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *                                                                                                                           
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 
 * 02110-1301, USA
 */

#ifndef _QWEXTRA_IO
#define _QWEXTRA_IO

#include "qwoptions_io.h"
#include "qwscreen.h"

typedef struct{
  char *dat_file;
  char *datwav_file;
  char *datpb_file;
  char *datscr_file;
  char *datdag_file;
  char *sta_file; 
  char *epsscr_file;
  char *epspb_file;
  char *eps3d_file;
  char *eps2d_file;
  char *gpt_file;
}filenames_t;


/* This function receives a string containing the name of the input file and
 * also a structure containing the simulation options. It returns a structure 
 * options1D_t containing all the names of files that will be generated in the 
 * simulation.
 */
filenames_t createFilenames1D(const char *input_filename, options1D_t options);


/* This function receives a string containing the name of the input file and
 * also a structure containing the simulation options. It returns a structure 
 * options2D_t containing all the names of files that will be generated in the 
 * simulation.
 */
filenames_t createFilenames2D(const char *input_filename, options2D_t options);


/* This function replaces the end of oldname (after the dot) by end, and
 * assigns the result to newname.
 */
int changeFileEnding(char **newname, const char *oldname, const char *end);


/* This function receives a pointer to an output file, a string with the
 * name of input file used in the simulation and a structure filenames_t 
 * with the names of files expected to be generated by the simulation. 
 * It sends the names of these files to the stream passed as first argument.
 * If you want to show the names on the screen you can pass stdout as first 
 * argument. Example: printFilenames(stdout, "example.in", fnames);
 */
int printFilenames(FILE *out, char *input_filename, filenames_t fnames);


/* This function receives as input the name of the file which describes
 * the broken links of the simulation. It also receives an integer max 
 * describing the size of the lattice (meaning that the lattice goes from
 * -max to max). And it receives two pointers for 4D-matrices. These
 * matrices will be modified, opening the links according to Eqs. (18)
 * and (19) of Physical Review A 74, (2006). The keywords accepted in
 * the file are POINT and LINE.
 *
 * Error numbers:
 *   0: operation successful (no error)
 *   1: invalid lattice size
 *   2: NULL pointer to L1 or L2
 *   3: could not open input file
 *   4: invalid coordinate (point does not exist in lattice)
 *   5: invalid slope
 *   6: error in the BEGINBL-ENDBL structure
 */
int readBrokenLinkFile2D(const char *filename, int max, 
			 int *****L1, int *****L2, int type);


/* This function receives as input a string containing the name of
 * the observation screen filename that will the written. It also
 * receives a structure screen_t, which contains all information
 * necessary to identify the position of the screen and the
 * accumulated probability in each point. The function writes the 
 * probabilities in the file.
 *
 * Error numbers:
 *   0: success
 *   1: could not create file
 */
int writeScreen(const char *filename, screen_t screen);


/* This function receives as input a structure filenames_t containing
 * all the names of files created by the simulation. It also receives
 * a structure options1D_t containing all the options used in the
 * simulation. It creates a file with name given by the filenames_t
 * structure and writes a gnuplot script on it.
 *
 * Error numbers:
 *   0: success
 *   1: could not create file
 */
int writeScript1D(filenames_t fname, options1D_t options);


/* This function receives as input a structure filenames_t containing
 * all the names of files created by the simulation. It also receives
 * a structure options2D_t containing all the options used in the
 * simulation. It creates a file with name given by the filenames_t
 * structure and writes a gnuplot script on it. This script can be
 * used to plot the observation screen, as well as to create 3D plots 
 * and contour plots of the results.
 *
 * Error numbers:
 *   0: success
 *   1: could not create file
 */
int writeScript2D(filenames_t fname, options2D_t options);

#endif

