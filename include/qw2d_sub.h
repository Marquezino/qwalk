/* QWalk (qw2d_sub.h) 
 * Copyright (C) 2008  Franklin Marquezino
 *                                                                                                                           
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *                                                                                                                           
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 
 * 02110-1301, USA
 */

#ifndef _QW2D_SUB
#define _QW2D_SUB

#include<complex.h>
#include "qwoptions_io.h"
#include "qwextra_io.h"

/* This subroutine sets the coin for a 2D simulation. It receives the 
 * address of the matrix that will be used to store the coin, an 
 * integer describing the type of the coin and the name of the input 
 * file. It sets the matrix according to the type of the coin (if
 * it is CUSTOM then the input file is be read to get the complete
 * description of the matrix).
 */
void setCoin2D(double complex *****C, int coinType, const char *filename);


/* This subroutine sets the initial state for a 2D simulation. It receives
 * the address of the array that will be used to store the state, an integer
 * describing the size of the lattice (we consider a lattice ranging from 
 * -max to max in both x and y axes), an integer describing the type of the 
 * initial state and the name of the input file. It sets the array according 
 * to the size of lattice and the type of the state (if it is CUSTOM then the 
 * input file is read to get the complete description of the state).
 */
void setState2D(double complex *****A,options2D_t opts,const char *filename);



/* This subroutine performs all checks requested by input file. It
 * receives the matrix used to store the state, a structure options2D_t
 * used to store the simulation options and an integer describing the
 * number of the iteration.
 */
void check2D(double complex ****A, options2D_t options, int iteration);



/* This subroutine performs one iteration in the quantum walk. It receives
 * the address of the matrix used to store the state, the address of a
 * temporary matrix used in the iteration, the coin matrix, both matrices
 * of broken links, a structure options2D_t with the simulation options and 
 * an integer describing the number of the iteration.
 */
void iterate2D(double complex *****A,double complex *****Atemp,double complex ****C, 
	       int ****BLinks1, int ****BLinks2, options2D_t opts, int iteration);



/* This subroutine obtains the statistics for an interation of the walk
 * and saves it into the appropriate file. When many experiments are
 * being carried out the subroutine takes the average of the results.
 * It receives as arguments the array used to store the state, a 
 * structure options2D_t used to store the simulation options, a
 * structure filenames_t used to store the names of files generated by
 * the simulation, an integer describing the number of the iteration,
 * an integer describing the number of experiments that will be carried out.
 */
void doStatistics2D(double complex ****A, double **StatProb, options2D_t options, 
		    filenames_t fnames, int iteration, int experiment);



/* This subroutine breaks random links of a lattice previously initialized.
 * The probability of breaking each link is given by options. It receives
 * the addresses of two matrices used to define the broken link topology, 
 * and a structure options2D_t defining the size of the lattice and the 
 * probability of broken links in each direction. Broken links are defined 
 * according to Physical Review A, 74, 012312 (2006).
 */
void randomBrokenLink2D(int *****BLinks1, int *****BLinks2, options2D_t options);



/* This function calculates the approximate stationary distribution with a 
 * certain number of steps, assuming that the lattice is finite, with 
 * boundaries correctly described by BLinks1 and BLinsk2. It receives a 
 * matrix containing the initial state, another containing the coin, two 
 * matrices describing broken links, and a structure options2D_t defining 
 * the size of the lattice and the probabilities of broken links. 
 * This function should not be used with unitary decoherence
 * generated by random broken links.
 */
double **getStationary2D(double complex ****A, double complex ****C, 
			 int ****BLinks1, int ****BLinks2, 
			 options2D_t options);

#endif
